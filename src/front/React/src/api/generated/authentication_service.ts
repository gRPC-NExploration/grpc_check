/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.29.3
 * source: authentication_service.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace app {
    export class GetBearerTokenRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            user_name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("user_name" in data && data.user_name != undefined) {
                    this.user_name = data.user_name;
                }
            }
        }
        get user_name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set user_name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            user_name?: string;
        }): GetBearerTokenRequest {
            const message = new GetBearerTokenRequest({});
            if (data.user_name != null) {
                message.user_name = data.user_name;
            }
            return message;
        }
        toObject() {
            const data: {
                user_name?: string;
            } = {};
            if (this.user_name != null) {
                data.user_name = this.user_name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.user_name.length)
                writer.writeString(1, this.user_name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetBearerTokenRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetBearerTokenRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.user_name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetBearerTokenRequest {
            return GetBearerTokenRequest.deserialize(bytes);
        }
    }
    export class GetBearerTokenResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            bearer_token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("bearer_token" in data && data.bearer_token != undefined) {
                    this.bearer_token = data.bearer_token;
                }
            }
        }
        get bearer_token() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set bearer_token(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            bearer_token?: string;
        }): GetBearerTokenResponse {
            const message = new GetBearerTokenResponse({});
            if (data.bearer_token != null) {
                message.bearer_token = data.bearer_token;
            }
            return message;
        }
        toObject() {
            const data: {
                bearer_token?: string;
            } = {};
            if (this.bearer_token != null) {
                data.bearer_token = this.bearer_token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.bearer_token.length)
                writer.writeString(1, this.bearer_token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetBearerTokenResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetBearerTokenResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.bearer_token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetBearerTokenResponse {
            return GetBearerTokenResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedAuthenticationServiceService {
        static definition = {
            GetBearerToken: {
                path: "/app.AuthenticationService/GetBearerToken",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetBearerTokenRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetBearerTokenRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetBearerTokenResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetBearerTokenResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract GetBearerToken(call: grpc_1.ServerUnaryCall<GetBearerTokenRequest, GetBearerTokenResponse>, callback: grpc_1.sendUnaryData<GetBearerTokenResponse>): void;
    }
    export class AuthenticationServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedAuthenticationServiceService.definition, "AuthenticationService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        GetBearerToken: GrpcUnaryServiceInterface<GetBearerTokenRequest, GetBearerTokenResponse> = (message: GetBearerTokenRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetBearerTokenResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetBearerTokenResponse>, callback?: grpc_1.requestCallback<GetBearerTokenResponse>): grpc_1.ClientUnaryCall => {
            return super.GetBearerToken(message, metadata, options, callback);
        };
    }
}
