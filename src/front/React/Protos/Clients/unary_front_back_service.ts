/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.29.3
 * source: unary_front_back_service.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./google/protobuf/empty";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace app {
    export class File extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            file_name?: string;
            file_bytes?: Uint8Array;
            is_final?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("file_name" in data && data.file_name != undefined) {
                    this.file_name = data.file_name;
                }
                if ("file_bytes" in data && data.file_bytes != undefined) {
                    this.file_bytes = data.file_bytes;
                }
                if ("is_final" in data && data.is_final != undefined) {
                    this.is_final = data.is_final;
                }
            }
        }
        get file_name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set file_name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get file_bytes() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set file_bytes(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        get is_final() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set is_final(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            file_name?: string;
            file_bytes?: Uint8Array;
            is_final?: boolean;
        }): File {
            const message = new File({});
            if (data.file_name != null) {
                message.file_name = data.file_name;
            }
            if (data.file_bytes != null) {
                message.file_bytes = data.file_bytes;
            }
            if (data.is_final != null) {
                message.is_final = data.is_final;
            }
            return message;
        }
        toObject() {
            const data: {
                file_name?: string;
                file_bytes?: Uint8Array;
                is_final?: boolean;
            } = {};
            if (this.file_name != null) {
                data.file_name = this.file_name;
            }
            if (this.file_bytes != null) {
                data.file_bytes = this.file_bytes;
            }
            if (this.is_final != null) {
                data.is_final = this.is_final;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.file_name.length)
                writer.writeString(1, this.file_name);
            if (this.file_bytes.length)
                writer.writeBytes(2, this.file_bytes);
            if (this.is_final != false)
                writer.writeBool(3, this.is_final);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): File {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new File();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.file_name = reader.readString();
                        break;
                    case 2:
                        message.file_bytes = reader.readBytes();
                        break;
                    case 3:
                        message.is_final = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): File {
            return File.deserialize(bytes);
        }
    }
    export class ClearStoredFilesResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            cleaned_count?: number;
            cleaned_file_names?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("cleaned_count" in data && data.cleaned_count != undefined) {
                    this.cleaned_count = data.cleaned_count;
                }
                if ("cleaned_file_names" in data && data.cleaned_file_names != undefined) {
                    this.cleaned_file_names = data.cleaned_file_names;
                }
            }
        }
        get cleaned_count() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set cleaned_count(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get cleaned_file_names() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as string[];
        }
        set cleaned_file_names(value: string[]) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            cleaned_count?: number;
            cleaned_file_names?: string[];
        }): ClearStoredFilesResponse {
            const message = new ClearStoredFilesResponse({});
            if (data.cleaned_count != null) {
                message.cleaned_count = data.cleaned_count;
            }
            if (data.cleaned_file_names != null) {
                message.cleaned_file_names = data.cleaned_file_names;
            }
            return message;
        }
        toObject() {
            const data: {
                cleaned_count?: number;
                cleaned_file_names?: string[];
            } = {};
            if (this.cleaned_count != null) {
                data.cleaned_count = this.cleaned_count;
            }
            if (this.cleaned_file_names != null) {
                data.cleaned_file_names = this.cleaned_file_names;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.cleaned_count != 0)
                writer.writeInt32(1, this.cleaned_count);
            if (this.cleaned_file_names.length)
                writer.writeRepeatedString(2, this.cleaned_file_names);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ClearStoredFilesResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ClearStoredFilesResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.cleaned_count = reader.readInt32();
                        break;
                    case 2:
                        pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ClearStoredFilesResponse {
            return ClearStoredFilesResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedUnaryFrontBackServiceService {
        static definition = {
            Upload: {
                path: "/app.UnaryFrontBackService/Upload",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: File) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => File.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            ClearStoredFiles: {
                path: "/app.UnaryFrontBackService/ClearStoredFiles",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_1.google.protobuf.Empty) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_1.google.protobuf.Empty.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ClearStoredFilesResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ClearStoredFilesResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract Upload(call: grpc_1.ServerUnaryCall<File, dependency_1.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_1.google.protobuf.Empty>): void;
        abstract ClearStoredFiles(call: grpc_1.ServerUnaryCall<dependency_1.google.protobuf.Empty, ClearStoredFilesResponse>, callback: grpc_1.sendUnaryData<ClearStoredFilesResponse>): void;
    }
    export class UnaryFrontBackServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedUnaryFrontBackServiceService.definition, "UnaryFrontBackService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        Upload: GrpcUnaryServiceInterface<File, dependency_1.google.protobuf.Empty> = (message: File, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_1.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.Upload(message, metadata, options, callback);
        };
        ClearStoredFiles: GrpcUnaryServiceInterface<dependency_1.google.protobuf.Empty, ClearStoredFilesResponse> = (message: dependency_1.google.protobuf.Empty, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ClearStoredFilesResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ClearStoredFilesResponse>, callback?: grpc_1.requestCallback<ClearStoredFilesResponse>): grpc_1.ClientUnaryCall => {
            return super.ClearStoredFiles(message, metadata, options, callback);
        };
    }
}
