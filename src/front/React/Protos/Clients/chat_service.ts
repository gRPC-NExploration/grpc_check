/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.29.3
 * source: chat_service.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./google/protobuf/empty";
import * as dependency_2 from "./google/protobuf/timestamp";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace app {
    export class Chat extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            chat_name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("chat_name" in data && data.chat_name != undefined) {
                    this.chat_name = data.chat_name;
                }
            }
        }
        get chat_name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set chat_name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            chat_name?: string;
        }): Chat {
            const message = new Chat({});
            if (data.chat_name != null) {
                message.chat_name = data.chat_name;
            }
            return message;
        }
        toObject() {
            const data: {
                chat_name?: string;
            } = {};
            if (this.chat_name != null) {
                data.chat_name = this.chat_name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.chat_name.length)
                writer.writeString(1, this.chat_name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Chat {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Chat();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.chat_name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Chat {
            return Chat.deserialize(bytes);
        }
    }
    export class JoinChatResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            chat_name?: string;
            creator_name?: string;
            created_time?: dependency_2.google.protobuf.Timestamp;
            messages?: MessageResponse[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("chat_name" in data && data.chat_name != undefined) {
                    this.chat_name = data.chat_name;
                }
                if ("creator_name" in data && data.creator_name != undefined) {
                    this.creator_name = data.creator_name;
                }
                if ("created_time" in data && data.created_time != undefined) {
                    this.created_time = data.created_time;
                }
                if ("messages" in data && data.messages != undefined) {
                    this.messages = data.messages;
                }
            }
        }
        get chat_name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set chat_name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get creator_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set creator_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get created_time() {
            return pb_1.Message.getWrapperField(this, dependency_2.google.protobuf.Timestamp, 3) as dependency_2.google.protobuf.Timestamp;
        }
        set created_time(value: dependency_2.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_created_time() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get messages() {
            return pb_1.Message.getRepeatedWrapperField(this, MessageResponse, 4) as MessageResponse[];
        }
        set messages(value: MessageResponse[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        static fromObject(data: {
            chat_name?: string;
            creator_name?: string;
            created_time?: ReturnType<typeof dependency_2.google.protobuf.Timestamp.prototype.toObject>;
            messages?: ReturnType<typeof MessageResponse.prototype.toObject>[];
        }): JoinChatResponse {
            const message = new JoinChatResponse({});
            if (data.chat_name != null) {
                message.chat_name = data.chat_name;
            }
            if (data.creator_name != null) {
                message.creator_name = data.creator_name;
            }
            if (data.created_time != null) {
                message.created_time = dependency_2.google.protobuf.Timestamp.fromObject(data.created_time);
            }
            if (data.messages != null) {
                message.messages = data.messages.map(item => MessageResponse.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                chat_name?: string;
                creator_name?: string;
                created_time?: ReturnType<typeof dependency_2.google.protobuf.Timestamp.prototype.toObject>;
                messages?: ReturnType<typeof MessageResponse.prototype.toObject>[];
            } = {};
            if (this.chat_name != null) {
                data.chat_name = this.chat_name;
            }
            if (this.creator_name != null) {
                data.creator_name = this.creator_name;
            }
            if (this.created_time != null) {
                data.created_time = this.created_time.toObject();
            }
            if (this.messages != null) {
                data.messages = this.messages.map((item: MessageResponse) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.chat_name.length)
                writer.writeString(1, this.chat_name);
            if (this.creator_name.length)
                writer.writeString(2, this.creator_name);
            if (this.has_created_time)
                writer.writeMessage(3, this.created_time, () => this.created_time.serialize(writer));
            if (this.messages.length)
                writer.writeRepeatedMessage(4, this.messages, (item: MessageResponse) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): JoinChatResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new JoinChatResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.chat_name = reader.readString();
                        break;
                    case 2:
                        message.creator_name = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.created_time, () => message.created_time = dependency_2.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.messages, () => pb_1.Message.addToRepeatedWrapperField(message, 4, MessageResponse.deserialize(reader), MessageResponse));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): JoinChatResponse {
            return JoinChatResponse.deserialize(bytes);
        }
    }
    export class MessageResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            chat_name?: string;
            message?: Message;
            sender_name?: string;
            message_send_time?: dependency_2.google.protobuf.Timestamp;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("chat_name" in data && data.chat_name != undefined) {
                    this.chat_name = data.chat_name;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("sender_name" in data && data.sender_name != undefined) {
                    this.sender_name = data.sender_name;
                }
                if ("message_send_time" in data && data.message_send_time != undefined) {
                    this.message_send_time = data.message_send_time;
                }
            }
        }
        get chat_name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set chat_name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get message() {
            return pb_1.Message.getWrapperField(this, Message, 2) as Message;
        }
        set message(value: Message) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_message() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get sender_name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set sender_name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get message_send_time() {
            return pb_1.Message.getWrapperField(this, dependency_2.google.protobuf.Timestamp, 4) as dependency_2.google.protobuf.Timestamp;
        }
        set message_send_time(value: dependency_2.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_message_send_time() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            chat_name?: string;
            message?: ReturnType<typeof Message.prototype.toObject>;
            sender_name?: string;
            message_send_time?: ReturnType<typeof dependency_2.google.protobuf.Timestamp.prototype.toObject>;
        }): MessageResponse {
            const message = new MessageResponse({});
            if (data.chat_name != null) {
                message.chat_name = data.chat_name;
            }
            if (data.message != null) {
                message.message = Message.fromObject(data.message);
            }
            if (data.sender_name != null) {
                message.sender_name = data.sender_name;
            }
            if (data.message_send_time != null) {
                message.message_send_time = dependency_2.google.protobuf.Timestamp.fromObject(data.message_send_time);
            }
            return message;
        }
        toObject() {
            const data: {
                chat_name?: string;
                message?: ReturnType<typeof Message.prototype.toObject>;
                sender_name?: string;
                message_send_time?: ReturnType<typeof dependency_2.google.protobuf.Timestamp.prototype.toObject>;
            } = {};
            if (this.chat_name != null) {
                data.chat_name = this.chat_name;
            }
            if (this.message != null) {
                data.message = this.message.toObject();
            }
            if (this.sender_name != null) {
                data.sender_name = this.sender_name;
            }
            if (this.message_send_time != null) {
                data.message_send_time = this.message_send_time.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.chat_name.length)
                writer.writeString(1, this.chat_name);
            if (this.has_message)
                writer.writeMessage(2, this.message, () => this.message.serialize(writer));
            if (this.sender_name.length)
                writer.writeString(3, this.sender_name);
            if (this.has_message_send_time)
                writer.writeMessage(4, this.message_send_time, () => this.message_send_time.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MessageResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MessageResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.chat_name = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.message, () => message.message = Message.deserialize(reader));
                        break;
                    case 3:
                        message.sender_name = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.message_send_time, () => message.message_send_time = dependency_2.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MessageResponse {
            return MessageResponse.deserialize(bytes);
        }
    }
    export class SendMessageRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            chat_name?: string;
            message_text?: Message;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("chat_name" in data && data.chat_name != undefined) {
                    this.chat_name = data.chat_name;
                }
                if ("message_text" in data && data.message_text != undefined) {
                    this.message_text = data.message_text;
                }
            }
        }
        get chat_name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set chat_name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get message_text() {
            return pb_1.Message.getWrapperField(this, Message, 2) as Message;
        }
        set message_text(value: Message) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_message_text() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            chat_name?: string;
            message_text?: ReturnType<typeof Message.prototype.toObject>;
        }): SendMessageRequest {
            const message = new SendMessageRequest({});
            if (data.chat_name != null) {
                message.chat_name = data.chat_name;
            }
            if (data.message_text != null) {
                message.message_text = Message.fromObject(data.message_text);
            }
            return message;
        }
        toObject() {
            const data: {
                chat_name?: string;
                message_text?: ReturnType<typeof Message.prototype.toObject>;
            } = {};
            if (this.chat_name != null) {
                data.chat_name = this.chat_name;
            }
            if (this.message_text != null) {
                data.message_text = this.message_text.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.chat_name.length)
                writer.writeString(1, this.chat_name);
            if (this.has_message_text)
                writer.writeMessage(2, this.message_text, () => this.message_text.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SendMessageRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SendMessageRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.chat_name = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.message_text, () => message.message_text = Message.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SendMessageRequest {
            return SendMessageRequest.deserialize(bytes);
        }
    }
    export class Message extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            message_text?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("message_text" in data && data.message_text != undefined) {
                    this.message_text = data.message_text;
                }
            }
        }
        get message_text() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set message_text(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            message_text?: string;
        }): Message {
            const message = new Message({});
            if (data.message_text != null) {
                message.message_text = data.message_text;
            }
            return message;
        }
        toObject() {
            const data: {
                message_text?: string;
            } = {};
            if (this.message_text != null) {
                data.message_text = this.message_text;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.message_text.length)
                writer.writeString(1, this.message_text);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Message {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Message();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.message_text = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Message {
            return Message.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedChatServiceService {
        static definition = {
            Join: {
                path: "/app.ChatService/Join",
                requestStream: false,
                responseStream: true,
                requestSerialize: (message: Chat) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => Chat.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: JoinChatResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => JoinChatResponse.deserialize(new Uint8Array(bytes))
            },
            SendMessage: {
                path: "/app.ChatService/SendMessage",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: SendMessageRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => SendMessageRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract Join(call: grpc_1.ServerWritableStream<Chat, JoinChatResponse>): void;
        abstract SendMessage(call: grpc_1.ServerUnaryCall<SendMessageRequest, dependency_1.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_1.google.protobuf.Empty>): void;
    }
    export class ChatServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedChatServiceService.definition, "ChatService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        Join: GrpcStreamServiceInterface<Chat, JoinChatResponse> = (message: Chat, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<JoinChatResponse> => {
            return super.Join(message, metadata, options);
        };
        SendMessage: GrpcUnaryServiceInterface<SendMessageRequest, dependency_1.google.protobuf.Empty> = (message: SendMessageRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_1.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.SendMessage(message, metadata, options, callback);
        };
    }
}
