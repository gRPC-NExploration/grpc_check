/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.29.3
 * source: streaming_back_front_service.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./google/protobuf/duration";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace app {
    export class GetFileNamesRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            interval?: dependency_1.google.protobuf.Duration;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("interval" in data && data.interval != undefined) {
                    this.interval = data.interval;
                }
            }
        }
        get interval() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Duration, 1) as dependency_1.google.protobuf.Duration;
        }
        set interval(value: dependency_1.google.protobuf.Duration) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_interval() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            interval?: ReturnType<typeof dependency_1.google.protobuf.Duration.prototype.toObject>;
        }): GetFileNamesRequest {
            const message = new GetFileNamesRequest({});
            if (data.interval != null) {
                message.interval = dependency_1.google.protobuf.Duration.fromObject(data.interval);
            }
            return message;
        }
        toObject() {
            const data: {
                interval?: ReturnType<typeof dependency_1.google.protobuf.Duration.prototype.toObject>;
            } = {};
            if (this.interval != null) {
                data.interval = this.interval.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_interval)
                writer.writeMessage(1, this.interval, () => this.interval.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetFileNamesRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetFileNamesRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.interval, () => message.interval = dependency_1.google.protobuf.Duration.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetFileNamesRequest {
            return GetFileNamesRequest.deserialize(bytes);
        }
    }
    export class GetFileNamesResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            file_name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("file_name" in data && data.file_name != undefined) {
                    this.file_name = data.file_name;
                }
            }
        }
        get file_name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set file_name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            file_name?: string;
        }): GetFileNamesResponse {
            const message = new GetFileNamesResponse({});
            if (data.file_name != null) {
                message.file_name = data.file_name;
            }
            return message;
        }
        toObject() {
            const data: {
                file_name?: string;
            } = {};
            if (this.file_name != null) {
                data.file_name = this.file_name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.file_name.length)
                writer.writeString(1, this.file_name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetFileNamesResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetFileNamesResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.file_name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetFileNamesResponse {
            return GetFileNamesResponse.deserialize(bytes);
        }
    }
    export class DownloadRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            file_name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("file_name" in data && data.file_name != undefined) {
                    this.file_name = data.file_name;
                }
            }
        }
        get file_name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set file_name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            file_name?: string;
        }): DownloadRequest {
            const message = new DownloadRequest({});
            if (data.file_name != null) {
                message.file_name = data.file_name;
            }
            return message;
        }
        toObject() {
            const data: {
                file_name?: string;
            } = {};
            if (this.file_name != null) {
                data.file_name = this.file_name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.file_name.length)
                writer.writeString(1, this.file_name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DownloadRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DownloadRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.file_name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DownloadRequest {
            return DownloadRequest.deserialize(bytes);
        }
    }
    export class DownloadResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            metadata?: FileMetadata;
            chunk?: number;
            data?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("metadata" in data && data.metadata != undefined) {
                    this.metadata = data.metadata;
                }
                if ("chunk" in data && data.chunk != undefined) {
                    this.chunk = data.chunk;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get metadata() {
            return pb_1.Message.getWrapperField(this, FileMetadata, 1) as FileMetadata;
        }
        set metadata(value: FileMetadata) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_metadata() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get chunk() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set chunk(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get data() {
            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
        }
        set data(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            metadata?: ReturnType<typeof FileMetadata.prototype.toObject>;
            chunk?: number;
            data?: Uint8Array;
        }): DownloadResponse {
            const message = new DownloadResponse({});
            if (data.metadata != null) {
                message.metadata = FileMetadata.fromObject(data.metadata);
            }
            if (data.chunk != null) {
                message.chunk = data.chunk;
            }
            if (data.data != null) {
                message.data = data.data;
            }
            return message;
        }
        toObject() {
            const data: {
                metadata?: ReturnType<typeof FileMetadata.prototype.toObject>;
                chunk?: number;
                data?: Uint8Array;
            } = {};
            if (this.metadata != null) {
                data.metadata = this.metadata.toObject();
            }
            if (this.chunk != null) {
                data.chunk = this.chunk;
            }
            if (this.data != null) {
                data.data = this.data;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_metadata)
                writer.writeMessage(1, this.metadata, () => this.metadata.serialize(writer));
            if (this.chunk != 0)
                writer.writeInt32(2, this.chunk);
            if (this.data.length)
                writer.writeBytes(3, this.data);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DownloadResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DownloadResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.metadata, () => message.metadata = FileMetadata.deserialize(reader));
                        break;
                    case 2:
                        message.chunk = reader.readInt32();
                        break;
                    case 3:
                        message.data = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DownloadResponse {
            return DownloadResponse.deserialize(bytes);
        }
    }
    export class FileMetadata extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            file_name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("file_name" in data && data.file_name != undefined) {
                    this.file_name = data.file_name;
                }
            }
        }
        get file_name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set file_name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            file_name?: string;
        }): FileMetadata {
            const message = new FileMetadata({});
            if (data.file_name != null) {
                message.file_name = data.file_name;
            }
            return message;
        }
        toObject() {
            const data: {
                file_name?: string;
            } = {};
            if (this.file_name != null) {
                data.file_name = this.file_name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.file_name.length)
                writer.writeString(1, this.file_name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FileMetadata {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FileMetadata();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.file_name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FileMetadata {
            return FileMetadata.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedStreamingBackFrontServiceService {
        static definition = {
            GetFileNames: {
                path: "/app.StreamingBackFrontService/GetFileNames",
                requestStream: false,
                responseStream: true,
                requestSerialize: (message: GetFileNamesRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetFileNamesRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetFileNamesResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetFileNamesResponse.deserialize(new Uint8Array(bytes))
            },
            Download: {
                path: "/app.StreamingBackFrontService/Download",
                requestStream: false,
                responseStream: true,
                requestSerialize: (message: DownloadRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => DownloadRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: DownloadResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => DownloadResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract GetFileNames(call: grpc_1.ServerWritableStream<GetFileNamesRequest, GetFileNamesResponse>): void;
        abstract Download(call: grpc_1.ServerWritableStream<DownloadRequest, DownloadResponse>): void;
    }
    export class StreamingBackFrontServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedStreamingBackFrontServiceService.definition, "StreamingBackFrontService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        GetFileNames: GrpcStreamServiceInterface<GetFileNamesRequest, GetFileNamesResponse> = (message: GetFileNamesRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<GetFileNamesResponse> => {
            return super.GetFileNames(message, metadata, options);
        };
        Download: GrpcStreamServiceInterface<DownloadRequest, DownloadResponse> = (message: DownloadRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<DownloadResponse> => {
            return super.Download(message, metadata, options);
        };
    }
}
